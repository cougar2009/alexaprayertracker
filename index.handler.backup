'use strict';
var Alexa = require("alexa-sdk");
var AWS = require("aws-sdk");
var APP_ID = "amzn1.ask.skill.87b92203-9867-4dff-8bd5-06d8e994edc0";
var SKILL_NAME = "Prayer Tracker";
var WELCOME_MESSAGE = "Welcome to Prayer Tracker. What would you like to do?";
var SETUP_MESSAGE = "Welcome to Prayer Tracker. Your family has not been setup. To Add Family Members say add Carson to the family ";
var HELP_MESSAGE = "To Add Family Members say add Carson to the family or ask whose turn is it for prayer. To cancel, say cancel.";
var HELP_REPROMPT = "Are you still there?";
var REPROMPT_SPEECH = "Try again.";
var EXIT_SKILL_MESSAGE = "Thank you for using Prayer Tracker.";
var myData = [];
var familyName = "";

exports.handler = function (event, context, callback) {
    var alexa = Alexa.handler(event, context);
    alexa.APP_ID = APP_ID;
    alexa.registerHandlers(handlers);
    alexa.execute();
};

AWS.config.update({
    region: "us-east-1",
    endpoint: "https://dynamodb.us-east-1.amazonaws.com"
});

var handlers = {
    'LaunchRequest': function () {
        console.log("***********************BEGIN start*********************");
        console.log("Status of myData on Startup no DB Call "+ myData.toString());
        myData = [];
        console.log("Status of myData after mydata equals brackets "+ myData.toString());
		storageGetNameList(this.event.session, (data) => {
			if (typeof(data) !== 'undefined' && typeof(data.Item) !== 'undefined' && typeof(data.Item.familyMembers) !== 'undefined') {
			    myData = data.Item.familyMembers;    
			}
	        console.log("Inital Startup onLaunch family members fresh from database I think "+ myData.toString());

			if (myData.length > 0){
                    this.emit(":ask", WELCOME_MESSAGE, HELP_MESSAGE);
    			}else{
    			    this.emit(":ask", SETUP_MESSAGE, HELP_MESSAGE);
    			}
			
        });			
    },
    'AddFamilyMembersIntent': function () {
        console.log("BEGIN AddFamilyMembersIntent");
        var name = this.event.request.intent.slots.name.value;
        var response = "";        
        console.log("about to add " +name + " to the family");
        console.log("myData before adding new family member "+ myData.toString());

        if (typeof(name) == 'undefined' || name === null)
        {
            response = "Please specify the name of the family member when making your request.";
            this.emit(':ask', response, HELP_MESSAGE);
        }
        else {
            storageGetNameList(this.event.session, (data) => {
    			if (typeof(data) !== 'undefined' && typeof(data.Item) !== 'undefined' && typeof(data.Item.familyMembers) !== 'undefined') {
    			    myData = [];
    			    myData = data.Item.familyMembers;
    			}
            });
            console.log("myData right after getting it from DB  "+ myData.toString());
            var index = myData.indexOf(name);

            if (index > -1) {
                response = name + " has already been added to your family.";
                this.emit(':ask', response, HELP_MESSAGE);
            } else {
                myData.push(name);
                console.log("myData right after pushing the new name on the array "+ myData.toString());
                storageSave(myData, this.event.session, name, (name) => {
                    response = 'Ok ' + name + ' was added to your family.';
                    this.emit(':ask', response, HELP_MESSAGE);
                });
            }
        }
    },
    'RemoveFamilyMemberIntent': function () {
        console.log("BEGIN RemoveFamilyMemberIntent");
        var name = this.event.request.intent.slots.name.value;
        var response = '';
        
        if (typeof(name) == 'undefined' || name === null)
        {
            response = "Please specify the name of the game when making your request.";
            this.emit(':ask', response, HELP_MESSAGE);
        }
        else {
            storageGetNameList(this.event.session, (data) => {
                if (typeof(data) !== 'undefined' && typeof(data.Item) !== 'undefined' && typeof(data.Item.familyMembers) !== 'undefined') {
                    myData = data.Item.familyMembers;
                }
            });
            var index = myData.indexOf(name);
    
            if (index > -1) {
                myData.splice(index, 1);
                storageSave(myData, this.event.session, name, (name) => {
                    response = 'Ok ' + name + ' was deleted from your list of names.';
                    this.emit(':ask', response, HELP_MESSAGE);
                });
            } else {
                response = "The name " + name + " was not in your list.";
                this.emit(':ask', response, HELP_MESSAGE);
            }
        }
    },
    'ListFamilyMembersIntent': function() {
        console.log("BEGIN ListFamilyMembersIntent");
        storageGetNameList(this.event.session, (data) => {
            var response = "";
			if (typeof(data) !== 'undefined' && typeof(data.Item) !== 'undefined' && typeof(data.Item.familyMembers) !== 'undefined') {
			    myData = [];
			    myData = data.Item.familyMembers;
			    console.log("list family members fresh from database I think "+ myData.toString());
				myData.sort;
			    console.log("list family members after sort "+ myData.toString());
                response = "Here are the members in your family: " + myData.toString();
			} else {
			    response = "You haven't added anyone to your family, say add John to my family for example";
			}
            this.emit(":ask", response, HELP_MESSAGE);
        });
    },
    'WhoseTurnIntent': function () {
        console.log("BEGIN WhoseTurnIntent");
        storageGetNameList(this.event.session, (data) => {
            var response = "";
			if (typeof(data) !== 'undefined' && typeof(data.Item) !== 'undefined' && typeof(data.Item.familyMembers) !== 'undefined') {
			    myData = [];
			    myData = data.Item.familyMembers;
			    var dataIndex = Math.floor(Math.random() * myData.length);
                var randomFamilyMember = myData[dataIndex];
                response = randomFamilyMember + "Would you be willing to say the prarer?";
			} else {
			    response = "You must add people to your family before I can call on someone";
			}
			this.emit(":ask", response, HELP_MESSAGE);
        });
    },
    "AMAZON.StopIntent": function () {
        this.emit(":tell", EXIT_SKILL_MESSAGE);
    },
    "AMAZON.CancelIntent": function () {
        this.emit(":tell", EXIT_SKILL_MESSAGE);
    },
    'AMAZON.HelpIntent': function () {
        this.emit(':ask', HELP_MESSAGE, HELP_REPROMPT);
    },
    'Unhandled': function () {
        this.emit("AMAZON.HelpIntent");
    }
};

function storageSave(myData, session, name, callback) {
    console.log("BEGIN storageSave");
    var dynamodb = new AWS.DynamoDB.DocumentClient();
    var params = {
        TableName: 'users_for_family_prayer',
        Item: {
            'userId': session.user.userId,
            'familyMembers': myData
        }
    };

    dynamodb.put(params, function (err, data) {
        if (err) { 
            console.log(err, err.stack);
        } else { 
			callback(name);
        }
    });
}

function storageGetNameList(session, callback) {
    console.log("Retrieving family members from database");
    console.log("myData.toString before DB call inside storageGetNameList "+ myData.toString());
    var dynamodb = new AWS.DynamoDB.DocumentClient();
    var params = {
        TableName: 'users_for_family_prayer',
        Key: {
            userId: session.user.userId
        },
        ProjectionExpression: 'familyMembers'
    };

    dynamodb.get(params, function (err, data) {
        if (err) { 
            console.log(err, err.stack);
        } else {
            callback(data);
        }
    });
}
